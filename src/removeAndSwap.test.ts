import { BigintIsh, CurrencyAmount, Percent, Token, TradeType } from '@uniswap/sdk-core'
import { Pair, Route as V2Route, Trade as V2Trade } from '@uniswap/v2-sdk'
import {
  encodeSqrtRatioX96,
  FeeAmount,
  nearestUsableTick,
  Pool,
  Position,
  Route as V3Route,
  TickMath,
  TICK_SPACINGS,
  Trade as V3Trade,
} from '@uniswap/v3-sdk'
import JSBI from 'jsbi'
import { Trade } from './entities/trade'
import { RemoveAndSwap } from './removeAndSwap'

const token0 = new Token(1, '0x0000000000000000000000000000000000000001', 18, 't0', 'token0')
const token1 = new Token(1, '0x0000000000000000000000000000000000000002', 18, 't1', 'token1')

const feeAmount = FeeAmount.MEDIUM
const sqrtRatioX96 = encodeSqrtRatioX96(1, 1)
const liquidity = 1_000_000

// v3
const makePool = (token0: Token, token1: Token) => {
  return new Pool(token0, token1, feeAmount, sqrtRatioX96, liquidity, TickMath.getTickAtSqrtRatio(sqrtRatioX96), [
    {
      index: nearestUsableTick(TickMath.MIN_TICK, TICK_SPACINGS[feeAmount]),
      liquidityNet: liquidity,
      liquidityGross: liquidity,
    },
    {
      index: nearestUsableTick(TickMath.MAX_TICK, TICK_SPACINGS[feeAmount]),
      liquidityNet: -liquidity,
      liquidityGross: liquidity,
    },
  ])
}

// v2
const makePair = (token0: Token, token1: Token, liquidity: BigintIsh) => {
  const amount0 = CurrencyAmount.fromRawAmount(token0, JSBI.BigInt(liquidity))
  const amount1 = CurrencyAmount.fromRawAmount(token1, JSBI.BigInt(liquidity))

  return new Pair(amount0, amount1)
}

const pool_0_1 = makePool(token0, token1)
const pair_0_1 = makePair(token0, token1, liquidity)

const position = new Position({
  pool: pool_0_1,
  tickLower: -60,
  tickUpper: 60,
  liquidity: 1111111111,
})

const slippageTolerance = new Percent(1, 100)
const recipient = '0x0000000000000000000000000000000000000003'
const deadline = 123

const amountIn = CurrencyAmount.fromRawAmount(token0, JSBI.BigInt(100))

describe('RemoveAndSwap', () => {
  it('v2 trade', async () => {
    const data = RemoveAndSwap.encodeRemoveAndSwap(
      position,
      V2Trade.exactIn(new V2Route([pair_0_1], token0, token1), amountIn),
      {
        slippageTolerance,
        recipient,
        deadline,
      }
    )

    expect(data).toEqual(
      '0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000007ba
    )
  })

  it('v3 trade', async () => {
    const data = RemoveAndSwap.encodeRemoveAndSwap(
      position,
      await V3Trade.fromRoute(new V3Route([pool_0_1], token0, token1), amountIn, TradeType.EXACT_INPUT),
      {
        slippageTolerance,
        recipient,
        deadline,
      }
    )

    expect(data).toEqual(
      '0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000007bbb80000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000006100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'
    )
  })

  it('meta trade', async () => {
    const v2Trade = V2Trade.exactIn(new V2Route([pair_0_1], token0, token1), amountIn)
    const v3Trade = await V3Trade.fromRoute(new V3Route([pool_0_1], token0, token1), amountIn, TradeType.EXACT_INPUT)

    const data = RemoveAndSwap.encodeRemoveAndSwap(
      position,
      await Trade.fromRoutes(
        [
          {
            routev2: v2Trade.route,
            amount: amountIn,
          },
        ],
        [
          {
            routev3: v3Trade.swaps[0].route,
            amount: amountIn,
          },
        ],
        TradeType.EXACT_INPUT
      ),
      {
        slippageTolerance,
        recipient,
        deadline,
      }
    )

    expect(data).toEqual(
      '0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000007bbb80000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000006100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'
    )
  })
})
